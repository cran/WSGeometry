// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bary_sinkhorn_arma
Rcpp::List bary_sinkhorn_arma(arma::mat weights, arma::mat frechet, int maxIter, double lambda, arma::mat C, double thresh, int threads);
RcppExport SEXP _WSGeometry_bary_sinkhorn_arma(SEXP weightsSEXP, SEXP frechetSEXP, SEXP maxIterSEXP, SEXP lambdaSEXP, SEXP CSEXP, SEXP threshSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type frechet(frechetSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bary_sinkhorn_arma(weights, frechet, maxIter, lambda, C, thresh, threads));
    return rcpp_result_gen;
END_RCPP
}
// rand_cxx
double rand_cxx();
RcppExport SEXP _WSGeometry_rand_cxx() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rand_cxx());
    return rcpp_result_gen;
END_RCPP
}
// index_cxx
int index_cxx(arma::mat x, double y);
RcppExport SEXP _WSGeometry_index_cxx(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(index_cxx(x, y));
    return rcpp_result_gen;
END_RCPP
}
// norm
double norm(arma::mat x, arma::mat y);
RcppExport SEXP _WSGeometry_norm(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(norm(x, y));
    return rcpp_result_gen;
END_RCPP
}
// expo
arma::mat expo(arma::mat a);
RcppExport SEXP _WSGeometry_expo(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(expo(a));
    return rcpp_result_gen;
END_RCPP
}
// gen_cost
arma::mat gen_cost(const arma::mat A, const arma::mat B);
RcppExport SEXP _WSGeometry_gen_cost(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_cost(A, B));
    return rcpp_result_gen;
END_RCPP
}
// wsbary_cxx_armaP
Rcpp::List wsbary_cxx_armaP(const Rcpp::List weightsR, arma::mat positions1, const Rcpp::List positionssetR, const arma::mat frechet_weights, const bool fixed_support, const int maxIter, const int weights_maxIter, const int pos_maxIter, const double stepsize, const double thresh, bool headstart, const int headstartlength, int threads);
RcppExport SEXP _WSGeometry_wsbary_cxx_armaP(SEXP weightsRSEXP, SEXP positions1SEXP, SEXP positionssetRSEXP, SEXP frechet_weightsSEXP, SEXP fixed_supportSEXP, SEXP maxIterSEXP, SEXP weights_maxIterSEXP, SEXP pos_maxIterSEXP, SEXP stepsizeSEXP, SEXP threshSEXP, SEXP headstartSEXP, SEXP headstartlengthSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type weightsR(weightsRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type positions1(positions1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type positionssetR(positionssetRSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type frechet_weights(frechet_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixed_support(fixed_supportSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type weights_maxIter(weights_maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type pos_maxIter(pos_maxIterSEXP);
    Rcpp::traits::input_parameter< const double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< bool >::type headstart(headstartSEXP);
    Rcpp::traits::input_parameter< const int >::type headstartlength(headstartlengthSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(wsbary_cxx_armaP(weightsR, positions1, positionssetR, frechet_weights, fixed_support, maxIter, weights_maxIter, pos_maxIter, stepsize, thresh, headstart, headstartlength, threads));
    return rcpp_result_gen;
END_RCPP
}
// transport_network_dual_arma
arma::mat transport_network_dual_arma(arma::mat a, arma::mat b, arma::mat C);
RcppExport SEXP _WSGeometry_transport_network_dual_arma(SEXP aSEXP, SEXP bSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(transport_network_dual_arma(a, b, C));
    return rcpp_result_gen;
END_RCPP
}
// transport_network_primal_arma
arma::mat transport_network_primal_arma(arma::mat a, arma::mat b, arma::mat C);
RcppExport SEXP _WSGeometry_transport_network_primal_arma(SEXP aSEXP, SEXP bSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(transport_network_primal_arma(a, b, C));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WSGeometry_bary_sinkhorn_arma", (DL_FUNC) &_WSGeometry_bary_sinkhorn_arma, 7},
    {"_WSGeometry_rand_cxx", (DL_FUNC) &_WSGeometry_rand_cxx, 0},
    {"_WSGeometry_index_cxx", (DL_FUNC) &_WSGeometry_index_cxx, 2},
    {"_WSGeometry_norm", (DL_FUNC) &_WSGeometry_norm, 2},
    {"_WSGeometry_expo", (DL_FUNC) &_WSGeometry_expo, 1},
    {"_WSGeometry_gen_cost", (DL_FUNC) &_WSGeometry_gen_cost, 2},
    {"_WSGeometry_wsbary_cxx_armaP", (DL_FUNC) &_WSGeometry_wsbary_cxx_armaP, 13},
    {"_WSGeometry_transport_network_dual_arma", (DL_FUNC) &_WSGeometry_transport_network_dual_arma, 3},
    {"_WSGeometry_transport_network_primal_arma", (DL_FUNC) &_WSGeometry_transport_network_primal_arma, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_WSGeometry(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
